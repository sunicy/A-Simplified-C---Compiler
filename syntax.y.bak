%{
#include <stdio.h>
#include "lexical.c"
%}

%token ERROR_TOKEN
%token COMMA SEMI
%token INT FLOAT ID
%token LC RC
%nonassoc SIMPLE_IF_STMT
%nonassoc ELSE
%token STRUCT RETURN IF WHILE
%right ASSIGNOP
%left OR
%left AND
%left RELOP
%left PLUS MINUS
%left DIV STAR
%right NOT TYPE
%left LP RP LB RB DOT

%%

Program		:	ExtDefList
			;
ExtDefList	:	ExtDef ExtDefList
			|	
			;
ExtDef		:	Specifier ExtDecList SEMI
			|	Specifier SEMI
			|	Specifier FunDec CompSt
			;
ExtDecList	:	VarDec
			|	VarDec COMMA ExtDecList
			;

Specifier	:	TYPE
			|	StructSpecifier
			;
StructSpecifier:STRUCT OptTag LC DefList RC
			|	STRUCT Tag
			;
OptTag		:	ID
			|
			;
Tag			:	ID
			;

VarDec		:	ID
			|	VarDec LB INT RB
			;
FunDec		:	ID LP VarList RP
			|	ID LP RP
			;
VarList		:	ParamDec COMMA VarList
			|	ParamDec
			;
ParamDec	:	Specifier VarDec
			;


CompSt		:	LC DefList StmtList RC
			;
StmtList	:	Stmt StmtList
			|
			;
Stmt		:	Exp SEMI
			|	CompSt
			|	RETURN Exp SEMI
			|	IF LP Exp RP Stmt %prec SIMPLE_IF_STMT
			|	IF LP Exp RP Stmt ELSE Stmt
			|	WHILE LP Exp RP Stmt
			|	SEMI
			|	error SEMI {printf("Error type 2 at line %d: Syntax error.\n", yylineno);}
			/*|	Exp error {printf("Error type 4 at line %d: ';' expected.\n", yylineno);}*/
			;

DefList		:	Def DefList
			|
			;
Def			:	Specifier DecList SEMI
			;
DecList		:	Dec
			|	Dec COMMA DecList
			;
Dec			:	VarDec
			|	VarDec ASSIGNOP Exp
			;

Exp			:	Exp ASSIGNOP Exp
			|	Exp AND Exp
			|	Exp OR Exp
			|	Exp RELOP Exp
			|	Exp PLUS Exp
			|	Exp MINUS Exp 
			| 	Exp STAR Exp
			|	Exp DIV Exp
			|	LP Exp RP
			|	MINUS Exp 
			|	NOT Exp
			|	ID LP Args RP
			|	ID LP RP
			|	Exp LB Exp RB
			|	Exp DOT ID
			|	ID
			|	INT
			|	FLOAT
			;
Args		:	Exp COMMA Args
			|	Exp
			;
%%

yyerror(char* msg)
{
	/*fprintf(stderr, "error: %s\n", msg);*/
}
